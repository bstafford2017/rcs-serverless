service: rcs-serverless

custom:
  settings:
    USERS_TABLE: Users
    ROOMS_TABLE: Rooms
    EVENTS_TABLE: Events

plugins:
  - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  environment: ${self:custom.settings}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.USERS_TABLE}'
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.ROOMS_TABLE}'
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.EVENTS_TABLE}'

functions:
  login:
    handler: src/lambdas/user.login
    events:
      - http:
          path: /users/login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getUser:
    handler: src/lambdas/user.getUser
    events:
      - http:
          path: /users/{id}
          method: get
          cors: true
  getUsers:
    handler: src/lambdas/user.getUsers
    events:
      - http:
          path: /users
          method: get
          cors: true
  createUser:
    handler: src/lambdas/user.createUser
    events:
      - http:
          path: /users
          method: post
          cors: true
  updateUser:
    handler: src/lambdas/user.updateUser
    events:
      - http:
          path: /users/{id}
          method: put
          cors: true
  deleteUser:
    handler: src/lambdas/user.deleteUser
    events:
      - http:
          path: /users/{id}
          method: delete
          cors: true
  getRoom:
    handler: src/lambdas/room.getRoom
    events:
      - http:
          path: /rooms/{id}
          method: get
          cors: true
  getRooms:
    handler: src/lambdas/room.getRooms
    events:
      - http:
          path: /rooms
          method: get
          cors: true
  createRoom:
    handler: src/lambdas/room.createRoom
    events:
      - http:
          path: /rooms
          method: post
          cors: true
  updateRoom:
    handler: src/lambdas/room.updateRoom
    events:
      - http:
          path: /rooms/{id}
          method: put
          cors: true
  deleteRoom:
    handler: src/lambdas/room.deleteRoom
    events:
      - http:
          path: /rooms/{id}
          method: delete
          cors: true
  getEvent:
    handler: src/lambdas/event.getEvent
    events:
      - http:
          path: /events/{id}
          method: get
          cors: true
  getEvents:
    handler: src/lambdas/event.getEvents
    events:
      - http:
          path: /events
          method: get
          cors: true
  createEvent:
    handler: src/lambdas/event.createEvent
    events:
      - http:
          path: /events
          method: post
          cors: true
  updateEvent:
    handler: src/lambdas/event.updateEvent
    events:
      - http:
          path: /events/{id}
          method: put
          cors: true
  deleteEvent:
    handler: src/lambdas/event.deleteEvent
    events:
      - http:
          path: /events/{id}
          method: delete
          cors: true
